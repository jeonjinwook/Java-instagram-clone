version: '3'
networks:
  shared_network:
services:

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.17.16
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - shared_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.17.16
    volumes:
      - ./logstash/pipeline/kafka-consumer.conf:/usr/share/logstash/pipeline/kafka-consumer.conf
      - ${SINCEDB_URL}:/usr/share/logstash/sincedb
      - ${LOG_FILE_URL}:/usr/share/logstash/logs
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - shared_network
    depends_on:
      - elasticsearch
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  kibana:
    container_name: kibana
    image: kibana:7.17.16
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - shared_network
    depends_on:
      - elasticsearch
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s


  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - shared_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 10000:9094
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://127.0.0.1:10000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    networks:
      - shared_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s

  #  kafka-ui:
  #    image: provectuslabs/kafka-ui:latest
  #    container_name: kafka-ui
  #    depends_on:
  #      - kafka
  #    ports:
  #      - 8083:8080
  #    environment:
  #      - DYNAMIC_CONFIG_ENABLED=true
  #      - KAFKA_CLUSTERS_0_NAME=peters_kafka
  #      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  #    networks:
  #      - shared_network

  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    ports:
      - 7012:6379
  postgresql:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: sa
      POSTGRES_PASSWORD: instagram55!
      POSTGRES_DB: instaDB
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - shared_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s