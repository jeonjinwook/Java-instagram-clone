spring.application.name=Java-instagram-clone
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.orm.jdbc.bind=trace
# Redis
spring.data.redis.host=localhost
spring.data.redis.port=7012
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.url=jdbc:h2:~/instagramClone;MODE=PostgreSQL;
spring.datasource.url=jdbc:h2:tcp://localhost/~/instagramClone;MODE=PostgreSQL;
spring.datasource.generate-unique-name=false
spring.datasource.username=sa
spring.datasource.password=instagram55!
spring.kafka.bootstrap-servers=127.0.0.1:10000
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.consumer.group-id=kafka-test-group
spring.kafka.consumer.client-id=kafka-test-client
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.max-poll-records=5
spring.kafka.producer.acks=all
spring.kafka.consumer.fetch-min-size=2
spring.graphql.graphiql.enabled=true
# Jwt
jwt.secret=sEfnEaka977Tg8?sy5PjdSXhRHB8f6Ts3g3CM5Cc